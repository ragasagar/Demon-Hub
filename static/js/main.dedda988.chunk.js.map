{"version":3,"sources":["component/search-box/search-box.component.jsx","component/card/card.component.jsx","component/card-list/card-list.component.jsx","App.js","serviceWorker.js","index.js"],"names":["SearchBox","placeholder","handleChange","type","className","onChange","Card","props","src","demon","id","alt","name","email","CardList","demons","map","key","App","handleClick","e","setState","searchText","target","value","state","this","getDemons","then","users","fetch","response","json","searchDemons","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"+TAGaA,G,YAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,2BACIC,KAAO,SACPF,YAAeA,EACfG,UAAW,SACXC,SAAUH,MCLLI,G,YAAO,SAACC,GAAD,OAChB,yBAAKH,UAAU,kBACX,yBAAKI,IAAG,+BAA0BD,EAAME,MAAMC,GAAtC,0BAAkEC,IAAI,UAC9E,4BAAKJ,EAAME,MAAMG,MACjB,2BAAIL,EAAME,MAAMI,UCHXC,EAAW,SAACP,GACrB,OAAO,yBAAKH,UAAU,aAElBG,EAAMQ,OAAOC,KAAI,SAAAP,GAAK,OAClB,kBAAC,EAAD,CAAMA,MAAOA,EAAOQ,IAAKR,EAAMC,UCwC5BQ,E,kDAzCb,aAAe,IAAD,8BACZ,gBAiBFC,YAAc,SAACC,GACb,EAAKC,SAAS,CACZC,WAAYF,EAAEG,OAAOC,SAlBvB,EAAKC,MAAQ,CACXV,OAAQ,GACRO,WAAY,IAJF,E,gEAQO,IAAD,OAClBI,KAAKC,YAAYC,MAAK,SAAAC,GAAK,OAAI,EAAKR,SAAS,CAC3CN,OAAQc,S,kCAKV,OAAOC,MAAM,8CAA8CF,MAAK,SAAAG,GAAQ,OAAIA,EAASC,Y,+BAU7E,IAAD,EACwBN,KAAKD,MAA5BV,EADD,EACCA,OAAQO,EADT,EACSA,WACVW,EAAelB,EAAOmB,QAAO,SAAAzB,GAAK,OAAIA,EAAMG,KAAKuB,cAAcC,SAASd,EAAWa,kBACzF,OACE,yBAAK/B,UAAU,OACb,0CACA,kBAAC,EAAD,CACEH,YAAY,gBACZC,aAAcwB,KAAKP,cAErB,kBAAC,EAAD,CAAUJ,OAAQkB,S,GArCRI,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.dedda988.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./search-box.style.css\";\r\n\r\nexport const SearchBox = ({placeholder, handleChange}) =>(\r\n    <input\r\n        type = \"search\"\r\n        placeholder = {placeholder}\r\n        className =\"search\"\r\n        onChange={handleChange}\r\n    />\r\n)","import React from \"react\"\r\nimport \"./card.style.css\"\r\n\r\nexport const Card = (props) => (\r\n    <div className=\"card-container\">\r\n        <img src={`https://robohash.org/${props.demon.id}?set=set2&size=180x180`} alt=\"demon\" />\r\n        <h2>{props.demon.name}</h2>\r\n        <p>{props.demon.email}</p>\r\n    </div>\r\n)","import React from \"react\"\r\nimport \"./card-list.style.css\"\r\nimport { Card } from \"../card/card.component\"\r\n\r\nexport const CardList = (props) =>{\r\n    return <div className=\"card-list\">\r\n        {\r\n        props.demons.map(demon => (\r\n            <Card demon={demon} key={demon.id}/>\r\n        ))}\r\n    </div>\r\n}","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport { SearchBox } from './component/search-box/search-box.component';\r\nimport { CardList } from './component/card-list/card-list.component';\r\n\r\nclass App extends Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      demons: [],\r\n      searchText: \"\"\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getDemons().then(users => this.setState({\r\n      demons: users\r\n    }));\r\n  }\r\n\r\n  getDemons() {\r\n    return fetch(\"https://jsonplaceholder.typicode.com/users\").then(response => response.json())\r\n  }\r\n\r\n  handleClick = (e) => {\r\n    this.setState({\r\n      searchText: e.target.value\r\n    });\r\n  }\r\n\r\n\r\n  render() {\r\n    const { demons, searchText } = this.state;\r\n    const searchDemons = demons.filter(demon => demon.name.toLowerCase().includes(searchText.toLowerCase()));\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>DEMONS HUB</h1>\r\n        <SearchBox\r\n          placeholder=\"Search Demons\"\r\n          handleChange={this.handleClick}\r\n        />\r\n        <CardList demons={searchDemons} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}